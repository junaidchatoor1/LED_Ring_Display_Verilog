//The pins are generated by a system builder as shown below, but the structural coding is 100% thought and executed by Junaid Chatoor
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ring_display(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
///////////////////////////THIS CODE IS WRITTEN ONLY BY JUNAID CHATOOR/////////////////////////////

	wire clk = MAX10_CLK1_50;
	wire reset = SW[0];
	reg [30:0] out, out_c;
	reg [7:0] sw;
	reg [19:0] leds;

	always @ (posedge clk) begin
	
			if (reset == 1'b1) begin
			leds <= #1 20'd0;
			sw = 8'b00000000;
			end
		
		if (~KEY[0]) begin
			leds[0] <= #1 1'b1;
			out <= #1 32'h00000001;

				end
		if(~KEY[1]) begin
			leds[0] <= #1 1'b0;
			out <= #1 32'h00000001;
		end

		if (~SW[9] && ~SW[1]) begin
			if (out >= 32'd5_000_001) begin
				out <= #1 32'd1;
			end
			else if (out >= 32'h00000001) begin
				out <= #1 out + 32'h00000001;
			end
		end
		
		if (SW[9] && ~SW[1]) begin
				if (out >= 32'd5_000_001) begin
					out <= #1 32'd5_000_000;
				end
				if (out <= 32'd5_000_000) begin
					out <= #1 out - 32'h0000001;
				end
		end
		if (~SW[9] && SW[1]) begin
			if (out >= 32'h00000001) begin
				out <= #1 out + 32'h00000001;
			end
		end
		
		if (SW[9] && SW[1]) begin
				if (out <= 32'd25_000_000) begin
					out <= #1 out - 32'h0000001;
				end
		end
		

		 
		if (~SW[1]) begin  //0.1 sec counter	
			if (~SW[9]) begin
				if (out == 32'd5_000_000) begin
					leds <= #1 leds << 1;
					out <=#1 32'd1;
				if (leds[16]) begin
					sw = sw + 1;
				end
				if(leds[19]) begin
					leds[0] <= #1 leds[19];
				end
			end
			end
		
			if (SW[9]) begin	
			if (out == 32'h00000001) begin
					leds <= #1 leds >> 1;
					out <= #1 32'd5_000_000;
				if (leds[16]) begin
					sw = sw - 1;
				end	
				if (leds[0]) begin
					leds[19] <= #1 leds[0];
				end	
			end	
			end
		end
		
		if (SW[1]) begin
			if (~SW[9]) begin
				if (out == 32'd25_000_000) begin
					leds <= #1 leds << 1;
					out <=#1 32'd1;
				if (leds[16]) begin
					sw = sw + 1;
				end
				if(leds[19]) begin
					leds[0] <= #1 leds[19];
				end
			end
			end
		
			if (SW[9]) begin	
			if (out == 32'h00000001) begin
					leds <= #1 leds >> 1;
					out <= #1 32'd25_000_000;
				if (leds[16]) begin
					sw = sw - 1;
				end	
				if (leds[0]) begin
					leds[19] <= #1 leds[0];
				end	
			end	
			end

		end 

	end
	
	assign HEX0[7] = 1'b1;
	assign HEX1[7] = 1'b1;
	assign HEX2[7] = 1'b1;
	assign HEX3[7] = 1'b1;
	assign HEX4[7] = 1'b1;
	assign HEX5[7] = 1'b1;
	assign HEX0[6:4] = 3'b111;
	assign HEX0[2:1] = 2'b11;
	assign HEX1[6:4] = 3'b111;
	assign HEX1[2:1] = 2'b11;
	assign HEX2[6:4] = 3'b111;
	assign HEX2[2:1] = 2'b11;
	assign HEX3[6] = 1'b1;
	assign HEX3[2:1] = 2'b11;
	
	assign LEDR[0] = leds[0];
	assign LEDR[1] = leds[1];
	assign LEDR[2] = leds[2];
	assign LEDR[3] = leds[3];
	assign LEDR[4] = leds[4];
	assign LEDR[5] = leds[5];
	assign LEDR[6] = leds[6];
	assign LEDR[7] = leds[7];
	assign LEDR[8] = leds[8];
	assign LEDR[9] = leds[9];
	
	assign HEX0[0] = ~leds[10];
   assign HEX0[3] = ~leds[19];
	assign HEX1[0] = ~leds[11];
	assign HEX1[3] = ~leds[18];
   assign HEX2[0] = ~leds[12];
	assign HEX2[3] = ~leds[17];
   assign HEX3[0] = ~leds[13];
	assign HEX3[5:3] = ~{leds[14],leds[15],leds[16]};
	
	seg7 s1(sw[3:0], HEX4[6:0]);
	seg7 s2(sw[7:4], HEX5[6:0]);

endmodule
